import os
import glob
import numpy as np

import pandas as pd


def merge_train(file_dir, csv_path):
    # These are opcodes that are used to get best results
    opcodes = ['jmp', 'mov', 'retf', 'push', 'pop', 'xor', 'retn', 'nop', 'sub', 'inc', 'dec', 'add', 'imul', 'xchg',
               'or', 'shr', 'cmp', 'call', 'shl', 'ror', 'rol', 'jnb', 'jz', 'rtn', 'lea', 'movzx']

    # Below taken registers are general purpose registers and special registers
    # All the registers which are taken are best
    registers = ['edx', 'esi', 'eax', 'ebx', 'ecx', 'edi', 'ebp', 'esp', 'eip']

    # Best keywords that are taken from different blogs
    keywords = ['.dll', 'std::', ':dword']

    os.chdir(file_dir)

    # files_list = os.listdir(file_dir)
    files_list = glob.glob("*.txt")
    df_list = []
    for file in files_list:
        # 从txt文件中读
        df = pd.read_table(file, sep=",", header=None)
        df_list.append(df)
    # 合并
    df_merge = pd.concat(df_list, axis=0, ignore_index=True)

    # 设置表头
    df_merge.columns = [
        'filename', 'jmp', 'mov', 'retf', 'push', 'pop', 'xor', 'retn', 'nop', 'sub', 'inc', 'dec', 'add', 'imul', 'xchg',
               'or', 'shr', 'cmp', 'call', 'shl', 'ror', 'rol', 'jnb', 'jz', 'rtn', 'lea', 'movzx', 'edx', 'esi', 'eax', 'ebx', 'ecx', 'edi', 'ebp', 'esp', 'eip', '.dll', 'std::', ':dword', "nan"
    ]
    df_merge= df_merge.drop(axis=1, columns="nan")
    y = pd.read_csv(csv_path)
    result_asm = pd.merge(df_merge, y, on="filename", how="left")
    result_asm.to_csv("output.csv")

def merge_test(file_dir, save_csv_path):
    os.chdir(file_dir)

    files_list = glob.glob("*.txt")
    df_list = []
    for file in files_list:
        # 从txt文件中读
        df = pd.read_table(file, sep=",", header=None)
        df_list.append(df)
    # 合并
    df_merge = pd.concat(df_list, axis=0, ignore_index=True)

    # 设置表头
    df_merge.columns = [
        'filename', 'jmp', 'mov', 'retf', 'push', 'pop', 'xor', 'retn', 'nop', 'sub', 'inc', 'dec', 'add', 'imul', 'xchg',
               'or', 'shr', 'cmp', 'call', 'shl', 'ror', 'rol', 'jnb', 'jz', 'rtn', 'lea', 'movzx', 'edx', 'esi', 'eax', 'ebx', 'ecx', 'edi', 'ebp', 'esp', 'eip', '.dll', 'std::', ':dword', "nan"
    ]
    df_merge= df_merge.drop(axis=1, columns="nan")
    # y = pd.read_csv(csv_path)
    # result_asm = pd.merge(df_merge, y, on="filename", how="left")
    path = os.path.join(save_csv_path, "output.csv")
    df_merge.to_csv(path)

if __name__=="__main__":
    # train
    # file_dir = r"D:\research\datasets\3_malware\CCF_1_train_set\asm\output"
    # csv_path = r"D:\research\datasets\3_malware\CCF_1_train_set\train_label.csv"
    # save_csv_path = r"D:\research\datasets\3_malware\CCF_1_train_set\asm"
    # merge_train(file_dir, csv_path)

    # test
    file_dir = r"D:\research\datasets\3_malware\CCF_1_data_set\test\asm\output"
    save_csv_path = r"D:\research\datasets\3_malware\CCF_1_data_set\test\asm"
    merge_test(file_dir, save_csv_path)