import torch
from torch import nn
from torch.nn import functional as F
from torchinfo import summary
import os


class MalVgg16(nn.Module):
    def __init__(self):
        super(MalVgg16, self).__init__()
        # block1
        self.conv1 = nn.Conv2d(in_channels=1, out_channels=64, kernel_size=3, stride=1, padding=1)
        self.conv2 = nn.Conv2d(64, 64, 3, stride=1, padding=1)
        self.pool1 = nn.MaxPool2d(2)
        # block2
        self.conv3 = nn.Conv2d(64, 128, 3, padding=1)
        self.conv4 = nn.Conv2d(128, 128, 3, padding=1)
        self.pool2 = nn.MaxPool2d(2)
        # block3
        self.conv5 = nn.Conv2d(128, 256, 3, padding=1)
        self.conv6 = nn.Conv2d(256, 256, 3, padding=1)
        self.conv7 = nn.Conv2d(256, 256, 3, padding=1)
        self.pool3 = nn.MaxPool2d(2)
        # block4
        self.conv8 = nn.Conv2d(256, 512, 3, padding=1)
        self.conv9 = nn.Conv2d(512, 512, 3, padding=1)
        self.conv10 = nn.Conv2d(512, 512, 3, padding=1)
        self.pool4 = nn.MaxPool2d(2)
        # block5
        self.conv11 = nn.Conv2d(512, 512, 3, padding=1)
        self.conv12 = nn.Conv2d(512, 512, 3, padding=1)
        self.conv13 = nn.Conv2d(512, 512, 3, padding=1)
        self.pool5 = nn.MaxPool2d(2)
        # block6
        self.linear1 = nn.Linear(7 * 7 * 512, 4096)
        self.linear2 = nn.Linear(4096, 4096)
        self.linear3 = nn.Linear(4096, 25)

    def forward(self, x):
        x = torch.relu(self.conv1(x))
        x = self.pool1(F.relu(self.conv2(x)))
        x = torch.relu(self.conv3(x))
        x = self.pool2(F.relu(self.conv4(x)))
        x = torch.relu(self.conv5(x))
        x = torch.relu(self.conv6(x))
        x = self.pool3(F.relu(self.conv7(x)))
        x = torch.relu(self.conv8(x))
        x = torch.relu(self.conv9(x))
        x = self.pool4(F.relu(self.conv10(x)))
        x = torch.relu(self.conv11(x))
        x = torch.relu(self.conv12(x))
        x = self.pool5(F.relu(self.conv13(x)))
        x = x.reshape(-1, 512 * 7 * 7)

        x = torch.relu(F.dropout(self.linear1(x), p=0.5))
        x = torch.relu(F.dropout(self.linear2(x), p=0.5))
        output = torch.softmax(self.linear3(x), dim=1)

        return output

class Configure:
    # 数据集存放路径，根据实际情况更改
    base_path = ""
    train_path = os.path.join(base_path, "train")
    test_path = os.path.join(base_path, "validation")

    model_path = "model.pth"  # 保存模型的路径
    load_model = False  # 是否要加载模型

    batch_size = 8
    epochs = 25
    lr = 0.001
    decay = 0.0005
    momentum = 0.9

